import Mathlib.CategoryTheory.Yoneda
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq
import Mathlib.CategoryTheory.Limits.Presheaf
import Mathlib.CategoryTheory.Limits.Shapes.FunctorCategory
import Mathlib.CategoryTheory.Adjunction.Over
import Poly.LCCC.Presheaf
import Poly.Polynomial
import GroupoidModel.NaturalModel

-- (SH) TODO: Make the proof and construction work with `Disp` rather than `Disp'`.


universe u

open CategoryTheory Category Limits

noncomputable section

variable {C : Type u} [Category C] [HasTerminal C] [HasPullbacks C]

variable {ùîº ùïå : C} (œÄ : ùîº ‚ü∂ ùïå)

class DisplayStruct {D A : C} (p : D ‚ü∂ A) where
  char : A ‚ü∂ ùïå
  var : D ‚ü∂ ùîº
  disp_pullback : IsPullback var p œÄ char

def IsDisplay : MorphismProperty C  :=
  fun D A (p : D ‚ü∂ A) ‚Ü¶ Nonempty (DisplayStruct œÄ p)

variable (C) in

/-- `Cart C` is a typeclass synonym for `Arrow C` which comes equipped with
a cateogry structure whereby morphisms between arrows `p` and `q` are cartesian
squares between them. -/
structure Cart where
  arr : Arrow C

namespace Cart

abbrev hom (p : Cart C) := p.arr.hom

@[simp]
lemma IsPullback.of_horiz_id {X Y : C} (f : X ‚ü∂ Y) : IsPullback (ùüô X) f f (ùüô Y) := by
  apply IsPullback.of_horiz_isIso
  simp only [CommSq.mk, id_comp, comp_id]

instance : Category (Cart C) where
  Hom p q := {v : p.arr ‚ü∂ q.arr // IsPullback v.left p.arr.hom q.arr.hom v.right}
  id p := ‚ü® ‚ü®ùüô _, ùüô _, by simp‚ü©, IsPullback.of_horiz_id p.arr.hom‚ü©
  comp {p q r} u v := ‚ü®‚ü®u.1.left ‚â´ v.1.left, u.1.right ‚â´ v.1.right, by simp‚ü©, by
    apply IsPullback.paste_horiz u.2 v.2‚ü©
  id_comp {p q} f:= by
    simp only [Functor.id_obj, Arrow.mk_left, Arrow.mk_right, id_comp]
    rfl -- we can replace by aesop, but they are a bit slow
  comp_id {p q} f := by
    simp only [Functor.id_obj, Arrow.mk_left, Arrow.mk_right, comp_id]
    rfl
  assoc {p q r s} f g h := by
    simp_all only [Functor.id_obj, Arrow.mk_left, Arrow.mk_right, assoc]

abbrev left {p q : Cart C} (f : p ‚ü∂ q) : p.arr.left ‚ü∂ q.arr.left := f.1.left

abbrev right {p q : Cart C} (f : p ‚ü∂ q) : p.arr.right ‚ü∂ q.arr.right := f.1.right

end Cart

def HasIdentities (W : WideSubquiver C) := ‚àÄ {X}, ùüô X ‚àà W X X

def HasCompositions (W : WideSubquiver C) :=
  ‚àÄ {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}, f ‚àà W X Y ‚Üí g ‚àà W Y Z ‚Üí (f ‚â´ g ‚àà W X Z)

structure WideSubcategory (C) [Category C] where
  hom : WideSubquiver C
  id : HasIdentities hom
  comp : HasCompositions hom

def WideSubcategory.toCategory {C} [Category C] (W : WideSubcategory C) : Category C where
  Hom X Y := { f : X ‚ü∂ Y // f ‚àà W.hom X Y }
  id X := ‚ü®ùüô X, W.id‚ü©
  comp {X Y Z} f g := ‚ü®f.1 ‚â´ g.1, W.comp f.2 g.2‚ü©

section

variable {C : Type*} [Category C]

set_option linter.unusedVariables false in
def WideSubcategory' (P : MorphismProperty C)
    (hP‚ÇÅ : P.ContainsIdentities) (hP‚ÇÇ : P.IsStableUnderComposition) :=
  C

instance WideSubcategory'.category (P : MorphismProperty C)
    (hP‚ÇÅ : P.ContainsIdentities) (hP‚ÇÇ : P.IsStableUnderComposition) :
    Category (WideSubcategory' P hP‚ÇÅ hP‚ÇÇ) where
  Hom X Y := { f : X ‚ü∂ Y | P f }
  id := by
    intro X
    apply P.id
  comp := by
    intro X Y Z f g hf hg
    apply Nonempty.elim hf
    apply Nonempty.elim hg
    apply Nonempty.intro
    apply P.comp

end

namespace WideSubcategory

open Cart

@[nolint unusedArguments]
abbrev toType {C} [Category C] (_ : WideSubcategory C) : Type u :=
  C

/-- A wide subcategory viewed as a category on its own. -/
instance category {C} [Category C] (W : WideSubcategory C) : Category (toType W) where
  Hom X Y := { f : X ‚ü∂ Y // f ‚àà W.1 X Y }
  id X := ‚ü®ùüô X, W.id‚ü©
  comp := fun {X Y Z} f g => ‚ü®f.1 ‚â´ g.1, W.comp f.2 g.2‚ü©

instance cart : WideSubcategory (Arrow C) where
  hom := fun X Y => { f : X ‚ü∂ Y | IsPullback f.left X.hom Y.hom f.right }
  id := by
    intro X
    apply Cart.IsPullback.of_horiz_id
  comp := by
    intro X Y Z f g hf hg
    apply IsPullback.paste_horiz hf hg

end WideSubcategory

def displayStructPresheaf : (Cart C)·µí·µñ  ‚•§ Type u where
  obj p := DisplayStruct œÄ p.unop.hom
  map {p q} f := fun d ‚Ü¶ ‚ü®f.unop.1.right ‚â´ d.char, f.unop.1.left ‚â´ d.var, by
    apply IsPullback.paste_horiz f.unop.2 d.disp_pullback‚ü©
  map_id := by sorry
  map_comp := by sorry

/-- A display morphism is an arrow equipped with a display structure. -/
abbrev Disp := ((displayStructPresheaf œÄ).Elements)·µí·µñ

namespace Disp

variable {œÄ}

def forget : Disp œÄ ‚•§ Cart C :=
(CategoryOfElements.œÄ (displayStructPresheaf œÄ)).leftOp

/-- The underlying arrow of a display map. -/
def arr (Œ± : Disp œÄ) : Arrow C := Œ±.unop.1.unop.arr

lemma arr_eq {Œ± : Disp œÄ} : Œ±.arr = (forget.obj Œ±).arr := rfl

/-- The base (i.e. codomain) of a display map. -/
def base (Œ± : Disp œÄ) : C := Œ±.arr.right

def top (Œ± : Disp œÄ) : C := Œ±.arr.left

/-- The charateristic map of a display map. -/
def char (Œ± : Disp œÄ) : Œ±.base ‚ü∂ ùïå := Œ±.unop.2.char

/-- The variable map of a display map. -/
def var (Œ± : Disp œÄ) : Œ±.top ‚ü∂ ùîº := Œ±.unop.2.var

/-- The pullback square of a displayed map. -/
def pullback (Œ± : Disp œÄ) : IsPullback Œ±.var Œ±.arr.hom œÄ Œ±.char := Œ±.unop.2.disp_pullback

/-- Coercion of `Disp` into `Arrow C`. -/
instance : CoeOut (Disp œÄ) (Arrow C) where
  coe := fun Œ± => Œ±.arr

lemma coe_to_cart {Œ± : Disp œÄ} : (Œ± : Arrow C) = Œ±.arr := rfl

variable {Œ± Œ≤ : Disp œÄ} (f : Œ± ‚ü∂ Œ≤)

def Hom.cart {Œ± Œ≤ : Disp œÄ} (f : Œ± ‚ü∂ Œ≤) := f.unop.1.unop

def Hom.arr {Œ± Œ≤ : Disp œÄ} (f : Œ± ‚ü∂ Œ≤) : Œ±.arr ‚ü∂ Œ≤.arr := f.unop.1.unop.1

instance {Œ± Œ≤ : Disp œÄ} : CoeOut (Œ± ‚ü∂ Œ≤) (Œ±.arr ‚ü∂ Œ≤.arr) where
  coe := fun f => Hom.arr f

lemma Hom.arr.left : (f : Œ±.arr ‚ü∂ Œ≤.arr).left = f.unop.1.unop.1.left := rfl

lemma Hom.arr.right : (f : Œ±.arr ‚ü∂ Œ≤.arr).right = f.unop.1.unop.1.right := rfl

/-- The underyling commutative square of a morphism of display maps. A morphism `f : Œ± ‚ü∂ Œ≤`
gives rise to a commutative square from `Œ≤.arr` to `Œ±.arr`. -/
theorem Hom.commSq {Œ± Œ≤ : Disp œÄ} (f : Œ± ‚ü∂ Œ≤) :
    CommSq (f : Œ±.arr ‚ü∂ Œ≤.arr).left Œ±.arr.hom Œ≤.arr.hom (f : Œ±.arr ‚ü∂ Œ≤.arr).right := by
  apply CommSq.flip
  apply CommSq.of_arrow

/-- The underyling commutative square of a morphism of display maps is cartesian.-/
theorem Hom.is_cartesian {Œ± Œ≤ : Disp œÄ} (f : Œ± ‚ü∂ Œ≤) :
    IsPullback (f : Œ±.arr ‚ü∂ Œ≤.arr).left Œ±.arr.hom Œ≤.arr.hom (f : Œ±.arr ‚ü∂ Œ≤.arr).right :=
  f.unop.1.unop.2

end Disp

def Arrow.Hom.mk {Œ± Œ≤ : Disp œÄ} (t : Œ≤.base ‚ü∂ Œ±.base) (h : t ‚â´ Œ±.char = Œ≤.char) :
    let cone := PullbackCone.mk Œ≤.var (Œ≤.arr.hom ‚â´ t) <| by
      rw [Category.assoc, Œ≤.pullback.w, h]
    Œ≤.arr ‚ü∂ Œ±.arr where
      left := Œ±.pullback.isLimit.lift cone
      right := t
      w := by
        dsimp
        have h‚ÇÅ := Œ±.pullback
        have h‚ÇÇ := Œ≤.pullback
        have h‚ÇÉ : _ ‚â´ Œ±.var = Œ≤.var := Œ±.pullback.isLimit.fac _ (some .left)
        rw [‚Üê f.2, ‚Üê h‚ÇÉ] at h‚ÇÇ
  exact (IsPullback.of_right h‚ÇÇ (P.disp.disp_pullback.isLimit.fac cone (some .right)) h‚ÇÅ)

def Disp.Hom.mk {Œ± Œ≤ : Disp œÄ} (t : Œ≤.base ‚ü∂ Œ±.base)  (h : t ‚â´ Œ±.char = Œ≤.char) :
    Œ± ‚ü∂ Œ≤ where
  unop := {
    val := {
      unop := {
        val := Œ±.
        property := _
      }
    }
    property := _
  }

structure Disp' where
  T : C
  B : C
  p : T ‚ü∂ B
  disp : DisplayStruct œÄ p := by infer_instance

namespace DisplayStruct

structure Hom {D A E B : C} (p : D ‚ü∂ A) [i : DisplayStruct œÄ p]
    (q : E ‚ü∂ B) [j : DisplayStruct œÄ q] where
  base : B ‚ü∂ A
  base_eq : base ‚â´ i.char = j.char

-- Note : This is a different category instance than the one in the `Disp` type.
instance category : Category (Disp' œÄ) where
  Hom P Q :=  {t : P.B ‚ü∂ Q.B // (t ‚â´ Q.disp.char) = P.disp.char}
  id (P : Disp' œÄ) := ‚ü®ùüô P.B, by simp only [id_comp]‚ü©
  comp {P Q R : Disp' œÄ} f g := ‚ü®f.1 ‚â´ g.1, by simp only [assoc, f.2, g.2]‚ü©

/-- A morphism of display maps is necessarily cartesian: The cartesian square is obtained by the
pullback pasting lemma. -/
theorem is_cartesian' {Q P : Disp' œÄ} (f : Q ‚ü∂ P) :
    let cone := PullbackCone.mk Q.disp.var (Q.p ‚â´ f.1) <| by
      rw [Category.assoc, f.2]; exact Q.disp.disp_pullback.w
    IsPullback (P.disp.disp_pullback.isLimit.lift cone) Q.p P.p f.1 := by
  let cone := PullbackCone.mk Q.disp.var (Q.p ‚â´ f.1) <| by
    rw [Category.assoc, f.2]
    exact Q.disp.disp_pullback.w
  let v := P.disp.disp_pullback.isLimit.lift cone
  have h‚ÇÅ := P.disp.disp_pullback
  have h‚ÇÇ := Q.disp.disp_pullback
  have h‚ÇÉ : v ‚â´ P.disp.var = Q.disp.var := P.disp.disp_pullback.isLimit.fac cone (some .left)
  rw [‚Üê f.2, ‚Üê h‚ÇÉ] at h‚ÇÇ
  exact (IsPullback.of_right h‚ÇÇ (P.disp.disp_pullback.isLimit.fac cone (some .right)) h‚ÇÅ)

def pullback {D A E B : C} (œÄ : E ‚ü∂ B) (p : D ‚ü∂ A) (q : E ‚ü∂ B)
    [i : DisplayStruct œÄ p] [j : DisplayStruct œÄ q]
    (t : B ‚ü∂ A) (h : t ‚â´ i.char = j.char) :
    DisplayStruct p q  where -- should be changed to a morphism from Disp'.mk p to Disp'.mk q
  char := t
  var := i.disp_pullback.isLimit.lift <| PullbackCone.mk j.var (q ‚â´ t) <| by
    rw [Category.assoc, h]
    exact j.disp_pullback.w
  disp_pullback := by
    let c := PullbackCone.mk j.var (q ‚â´ t) (by rw [Category.assoc, h]; exact j.disp_pullback.w)
    let v := i.disp_pullback.isLimit.lift c
    show IsPullback v ..
    have h‚ÇÅ := i.disp_pullback
    have h‚ÇÇ := j.disp_pullback
    have h‚ÇÉ : v ‚â´ i.var = j.var := i.disp_pullback.isLimit.fac c (some .left)
    rw [‚Üê h, ‚Üê h‚ÇÉ] at h‚ÇÇ
    exact (IsPullback.of_right h‚ÇÇ (i.disp_pullback.isLimit.fac c (some .right)) h‚ÇÅ)

def displayMapOfPullback {D A B : C} (p : D ‚ü∂ A) [i : DisplayStruct œÄ p] (t : B ‚ü∂ A) :
    DisplayStruct œÄ (pullback.snd : Limits.pullback p t ‚ü∂ B) where
  char := t ‚â´ i.char
  var := pullback.fst ‚â´ i.var
  disp_pullback := IsPullback.paste_horiz (IsPullback.of_hasPullback _ _) i.disp_pullback

end DisplayStruct

variable {Ctx : Type u} [SmallCategory Ctx] [HasTerminal Ctx]

open NaturalModel in

instance [NaturalModelBase Ctx] (Œì : Ctx) (A : y(Œì) ‚ü∂ Ty) :
    DisplayStruct tp (yoneda.map (disp Œì A)) where
  char := A
  var := var Œì A
  disp_pullback := disp_pullback A
